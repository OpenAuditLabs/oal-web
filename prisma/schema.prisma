// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileCount   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  audits Audit[]

  @@map("projects")
}

model Audit {
  id             String        @id @default(cuid())
  projectId      String
  projectName    String        // Denormalized for faster queries
  size           String        // File size (e.g., "4.3MB", "2.6 GB")
  status         AuditStatus
  progress       Int?          // Progress percentage (0-100) for active audits
  fileCount      Int?          // Number of files (used while active)
  overallSeverity SeverityLevel?
  findingsCount  Int           @default(0)
  duration       String?       // Duration in format like "30:05" (minutes:seconds)
  completedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  findings Finding[]

  @@map("audits")
}

model Finding {
  id          String        @id @default(cuid())
  auditId     String
  title       String
  description String
  severity    SeverityLevel
  category    String?       // e.g., "SQL Injection", "XSS", "Authentication"
  fileName    String?       // File where the finding was discovered
  lineNumber  Int?          // Line number in the file
  remediation String?       // Suggested fix/remediation
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  audit Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@map("findings")
}

enum AuditStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED

  @@map("audit_status")
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("severity_level")
}
